include:
- .gitlab-ci.homework.yml

build container image template:
  extends: .build container image job
  variables:
    DOCKERFILE_NAME: Dockerfile.template
    CONTAINER_IMAGE_NAME: ${CONTAINER_IMAGE_REGISTRY_USER}/dorinta-sablon:${CI_COMMIT_REF_SLUG}

build container image:
  extends: .build container image job
  needs:
  - job: build container image template
  rules:
  - changes:
    - ${ASSIGNMENT_WORKDIR}/Dockerfile.template
  variables:
    CONTAINER_IMAGE_BUILD_ARGS: >
      BASE_IMAGE=${CONTAINER_IMAGE_REGISTRY_USER}/dorinta-sablon:${CI_COMMIT_REF_SLUG}
      REVISION=${CI_COMMIT_SHA}
      AUTHOR=${GITLAB_USER_NAME}
    CONTAINER_IMAGE_NAME: ${CONTAINER_IMAGE_REGISTRY_USER}/dorinta:${CI_COMMIT_REF_SLUG}
  before_script:
  - |
    mkdir -p "${DOCKERFILE_CONTEXT}/src"
    echo "Merry Christmas!" > "${DOCKERFILE_CONTEXT}/src/${CI_PIPELINE_ID}-1"
    echo "Happy New Year!" > "${DOCKERFILE_CONTEXT}/src/${CI_PIPELINE_ID}-2"

test container image template:
  extends: .test container image job
  needs:
  - job: build container image template
    optional: true
  variables:
    GIT_STRATEGY: clone
    CONTAINER_IMAGE_NAME: !reference [build container image template, variables, CONTAINER_IMAGE_NAME]
  script:
  - docker pull $CONTAINER_IMAGE_NAME
  - |
    labels=$(docker inspect $CONTAINER_IMAGE_NAME --format '{{ json .Config.Labels }}')
    [ "$labels" == "null" ] \
      || (echo FAIL: Template image should not have labels$'\n'${labels}; exit 1)
  - |
    triggers=$(docker inspect $CONTAINER_IMAGE_NAME --format '{{ join .Config.OnBuild "\n" }}')
    for label in org.opencontainers.image.authors org.opencontainers.image.revision
    do
      [ "$(echo "$triggers" | grep -o $label || echo)" == "$label" ] \
        || (echo "FAIL: Template image should have trigger creating label '${label}'"$'\n'"${triggers}"; exit 1)
    done

test container image:
  extends: .test container image job
  needs:
  - job: build container image
    optional: true
  - job: test container image template
  variables:
    GIT_STRATEGY: clone
    CONTAINER_IMAGE_NAME: !reference [build container image, variables, CONTAINER_IMAGE_NAME]
  script:
  - docker pull $CONTAINER_IMAGE_NAME
  - |
    labels=$(docker inspect $CONTAINER_IMAGE_NAME --format '{{ json .Config.Labels }}')
    [ "$labels" != "null" ] \
      || (echo FAIL: Image must have labels$'\n'${labels}; exit 1)
    for label_key in org.opencontainers.image.authors org.opencontainers.image.revision
    do
      label_value=$(docker inspect $CONTAINER_IMAGE_NAME --format "{{ index .Config.Labels \"${label_key}\" }}")
      [ "$label_value" ] \
        || (echo FAIL: Image must have non empty \'${label_key}\' label$'\n'${labels}; exit 1)
    done
  - |
    container_id=$(docker create $CONTAINER_IMAGE_NAME)
    for src_file in ${CI_PIPELINE_ID}-1 ${CI_PIPELINE_ID}-2; do
      docker cp ${container_id}:/src/${src_file} . \
        || (echo FAIL: Content of image /src directory does not match expectations; exit 1)
    done
  - docker run --rm $CONTAINER_IMAGE_NAME
  after_script:
  - docker container prune --force
